{% extends "base.html.twig" %}
{% block title %}Report{% endblock %}

{% block body %}
    
<article class="content">
    <h1>Report</h1>
    <section>
    <h2>Kmom01</h2>
    <p>Jag är väl familjär med objektorienterad programmering från tidigare kurser. Jag har arbetat med objektorientering i Python och javascript förut men tror inte jag har rört objektorienterinegn i PHP förut. </p>
    <p>PHPs objektorientering fungerar likt de av andra programmeringspråk med klasser och objekt. Man använder variablen $this for att referera till nuvarande objekt som används i metoderna inom klassen. Detta är likt att använda this i javascaript eller self i python. För att skapa ett objekt av klassen skriver man $obj = new Class() och för att ropa på en metod inom objektet $obj->metod(). Det finns mutable eller immutable objekt där mutible betyder att man kan förändra objektet under sin levnadstid medans immutable kan man ej ändra.</p>
    <p>Jag tror att jag har ganska bra uppfattning på hur kodbasen, koden och strukturen hänger ihop. Det är väldigt likt det vi använde i design kursen med strukturen och twig. Strukturen känns krångligare än det vi har använt i andra kurser men tror att det underlättar senare.</p>
    <p>I PHP the right way artikeln tyckte jag att sektionen om databaser var väldigt intressant då jag vill utnyttja det vi har lärt oss i Databaskursen. I webteckursen körde vi lite SQL i php men nu är det helt annorlunda då vi har mer kunskaper och erfarenhet inom databaser. Jag vill veta mer om design patterns då jag känner att det kan utnyttjas mycket framöver. Design patterns ger en generell struktur på sitt projekt och gör så att det blir lättare att hantera sin kod för både sig själv och för andra. Jag tyckte med att delen om password hashing var med intressant då jag har läst lite om webbsäkerhet på gymnasiet och hur man kan skydda användarens inlogg-detaljer på en databas.</p>
    <p>Min TIL för denna veckan är att sätta upp ett projekt med symfony och lite mer om hur TWIG frungerar då vi inte gick särskillt djupt i desgin kursen. </p>
    </section>
    
    <section>
    <h2>Kmom02</h2>
    <p>För attanvända arv i PHP skriver man tillexempel ”class B extends A”. Vad som menas med arv i objektorienterad programmering är att en klass ärver offentliga och skyddade attribut, metoder och konstanter från en förälder klass. Komposition är en stark relation mellan klasser alltså kan inte en klass med komposition relation till en annan klass existera utan den klassen. Ett exempel från denna uppgift att deck klassen kan inte existera utan card klassen. I PHP finns det inte stöd för multipelt arv därför finns det trait i stället. Precis som arv finns det metoder och variabler i traits för att utöka en klass. Traits är som kodmoduler som är återanvändbara i flera olika klasser. När en klass implementera ett interface betyder det att klassen gör ett löfte att interfacets metoder skall återfinnas i klassen. Om en klass implemtera ett interface vet man vad man kan göra med den klassen beroende på interfacet. </p>
    <p>Jag är rätt nöjd med min implementation av uppgiften. Jag skapade klasserna card, deck , deck2 och player. För att skapa kortleken skapade jag ett objekt av deck klassen som innehöll femtiotvå unika instanser av card klassen. Varje kort har ett värde, en svit och ett namn om man man använder getDetails metoden. Jag valde att separera värde och namn så att kort som ”kung” är spelbara. För att blanda kortleken använder jag PHP’s inbyggda shufflefunktion. För att dra ett kort skapade jag metoden drawCard som tar $amount som argument. $amount är antalet kort man vill dra, om det finns tillräckligt med kort används array_pop i en forloop som loopar lika många gånger som värdet av $amount. Kortet som blir draget sätts in i en array som håller koll på vilka kort som är dragna så att dem kan senare visas på sidan.  Player klassen används för att hantera spelarens hand. Player klassen har en metod till att dela ut kort till spelaren som tar argumentet array $draw som sätts in i spelarens hand. Jag använder SessionInterface för att spara data i sessioner. På detta vis är datan sparad fast än man har uppdaterat eller bytt sidan.  Klassen Deck2 ärver från klassen Deck men lägger till två jokrar till kortleken. Jag ser lite förbättringspotential i min kodstruktur då jag tycker att jag har lite för mycket kod i min kontroller-sida och jag det känns som jag skriver om mycket kod.</p>
    <p>Jag gjorde inte denna del av uppgiften och avvakta och göra den delen i kmom03.</p>
    <p>Min TIL för detta kmom är att spara data i sessioner med symfony, hur man använder arv i PHP, hur man gör en JSON api med symfony, hur man hantera arv i PHP och bara allmänt hur man använder klasser i PHP. </p>
    </section>
    
    <section>
    <h2>Kmom03</h2>
    <p>Här är redovisningstexten</p>
    </section>
    
    <section>
    <h2>Kmom04</h2>
    <p>Här är redovisningstexten</p>
    </section>
    
    <section>
    <h2>Kmom05</h2>
    <p>Här är redovisningstexten</p>
    </section>
    
    <section>
    <h2>Kmom06</h2>
    <p>Här är redovisningstexten</p>
    </section>
    
    <section>
    <h2>Kmom07-10</h2>
    <p>Här är redovisningstexten</p>
    </section>
</article>
{% endblock %}