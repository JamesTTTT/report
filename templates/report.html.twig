{% extends "base.html.twig" %}
{% block title %}Report{% endblock %}

{% block body %}
    
<article class="content">
    <h1>Report</h1>
    <section>
    <h2>Kmom01</h2>
    <p>Jag är väl familjär med objektorienterad programmering från tidigare kurser. Jag har arbetat med objektorientering i Python och javascript förut men tror inte jag har rört objektorienterinegn i PHP förut. </p>
    <p>PHPs objektorientering fungerar likt de av andra programmeringspråk med klasser och objekt. Man använder variablen $this for att referera till nuvarande objekt som används i metoderna inom klassen. Detta är likt att använda this i javascaript eller self i python. För att skapa ett objekt av klassen skriver man $obj = new Class() och för att ropa på en metod inom objektet $obj->metod(). Det finns mutable eller immutable objekt där mutible betyder att man kan förändra objektet under sin levnadstid medans immutable kan man ej ändra.</p>
    <p>Jag tror att jag har ganska bra uppfattning på hur kodbasen, koden och strukturen hänger ihop. Det är väldigt likt det vi använde i design kursen med strukturen och twig. Strukturen känns krångligare än det vi har använt i andra kurser men tror att det underlättar senare.</p>
    <p>I PHP the right way artikeln tyckte jag att sektionen om databaser var väldigt intressant då jag vill utnyttja det vi har lärt oss i Databaskursen. I webteckursen körde vi lite SQL i php men nu är det helt annorlunda då vi har mer kunskaper och erfarenhet inom databaser. Jag vill veta mer om design patterns då jag känner att det kan utnyttjas mycket framöver. Design patterns ger en generell struktur på sitt projekt och gör så att det blir lättare att hantera sin kod för både sig själv och för andra. Jag tyckte med att delen om password hashing var med intressant då jag har läst lite om webbsäkerhet på gymnasiet och hur man kan skydda användarens inlogg-detaljer på en databas.</p>
    <p>Min TIL för denna veckan är att sätta upp ett projekt med symfony och lite mer om hur TWIG frungerar då vi inte gick särskillt djupt i desgin kursen. </p>
    </section>
    
    <section>
    <h2>Kmom02</h2>
    <p>För attanvända arv i PHP skriver man tillexempel ”class B extends A”. Vad som menas med arv i objektorienterad programmering är att en klass ärver offentliga och skyddade attribut, metoder och konstanter från en förälder klass. Komposition är en stark relation mellan klasser alltså kan inte en klass med komposition relation till en annan klass existera utan den klassen. Ett exempel från denna uppgift att deck klassen kan inte existera utan card klassen. I PHP finns det inte stöd för multipelt arv därför finns det trait i stället. Precis som arv finns det metoder och variabler i traits för att utöka en klass. Traits är som kodmoduler som är återanvändbara i flera olika klasser. När en klass implementera ett interface betyder det att klassen gör ett löfte att interfacets metoder skall återfinnas i klassen. Om en klass implemtera ett interface vet man vad man kan göra med den klassen beroende på interfacet. </p>
    <p>Jag är rätt nöjd med min implementation av uppgiften. Jag skapade klasserna card, deck , deck2 och player. För att skapa kortleken skapade jag ett objekt av deck klassen som innehöll femtiotvå unika instanser av card klassen. Varje kort har ett värde, en svit och ett namn om man man använder getDetails metoden. Jag valde att separera värde och namn så att kort som ”kung” är spelbara. För att blanda kortleken använder jag PHP’s inbyggda shufflefunktion. För att dra ett kort skapade jag metoden drawCard som tar $amount som argument. $amount är antalet kort man vill dra, om det finns tillräckligt med kort används array_pop i en forloop som loopar lika många gånger som värdet av $amount. Kortet som blir draget sätts in i en array som håller koll på vilka kort som är dragna så att dem kan senare visas på sidan.  Player klassen används för att hantera spelarens hand. Player klassen har en metod till att dela ut kort till spelaren som tar argumentet array $draw som sätts in i spelarens hand. Jag använder SessionInterface för att spara data i sessioner. På detta vis är datan sparad fast än man har uppdaterat eller bytt sidan.  Klassen Deck2 ärver från klassen Deck men lägger till två jokrar till kortleken. Jag ser lite förbättringspotential i min kodstruktur då jag tycker att jag har lite för mycket kod i min kontroller-sida och jag det känns som jag skriver om mycket kod.</p>
    <p>Jag gjorde inte denna del av uppgiften och avvakta och göra den delen i kmom03.</p>
    <p>Min TIL för detta kmom är att spara data i sessioner med symfony, hur man använder arv i PHP, hur man gör en JSON api med symfony, hur man hantera arv i PHP och bara allmänt hur man använder klasser i PHP. </p>
    </section>
    
    <section>
    <h2>Kmom03</h2>
    <p>Jag skapade spelet 21 utifrån dem spelreglerna som stog på dbwebb.</p>
    <p>Det kändes lite jobbigt att modellera ett kort spel med psuedokod och flödediagram eftersom det är något jag har väldigt lite erfarenhet med och behöver jobba mer med i framtiden för att komma in i processen. I nuläget visste jag inte rikgtigt vart jag skulle börja eller vad som behövdes för att få spelet att fungera. Min kod skiljer sig lite ifrån det jag gjorde i min planering vilket kan bero på att jag inte hade den mest uttänkta lösningen redan i början. Jag vill gärna fortsätta med att jobba på detta vis då man kan komma igång med koden direkt och man har en lite klarare ide på man ska sätta ihop saker och ting när man har planerat i förväg. Att göra på detta vis känns som det hade varit smidigare med ett större projekt som har potential att expandera då att göra ett simpelt kortspel kändes lite enkelt för en planering med schema och psuedokod. </p>
    <p>Jag är relativt nöjd med det jag har skapat. Jag började med att googla exempel på flödeschema och psuedokod så jag kunde exekvera den delen av uppgiften på ett smidigare sätt. För själva koden så använde jag fyra olika klasser Crad, Deck, Player och en ny som kallas Game. Jag gjorde ett Deck objekt som innehöll 52 Card objekt och sedan använde shuffle metoden för att blanda kortleken. Jag skapa två player objekt en till banken och en till självaste spelaren. Player objektet håller koll på handen med kort. Game objektet representera spelet och tar två parameter i sin konstruktion en till banken och en till spelaren. Game objektets jobb är att jämföra värdet på båda spelarnas hand för att sedan berätta vem som vann rundan. På spelplanen finns det tre knappar en draw, en ready och en restart. Draw knappen drar korten till spelarens hand, ready knappen betyder att man är redo och då är det bankens tur att dra kort och restart knappen starta om sessionen. När banken har dragit sina kort jämförs det med spelaren och ett litet meddelande poppar upp i botten som berättar vem som van rundan. Jag ser lite potential att förbättra bankens ai vart den kan dra kort baserat på sannolikhet och jag tycker att min session get och set är lite röriga. </p>
    <p>Jag tycker faktiskt om symfony och jar börjat uppskatta php mer nu när man förstå programmering lite bättre än när vi hade webtec kursen. Symfony är inte särskillt komplicerat och det kan som det är lätt att bygga komplicerade saker i det. Jag tycker med om twig då det gör front end väldigt smidigt då man skapar templates så man inte behöver skriva om mycket kod.</p>
    <p>Mitt today i learned för kmom03 är att använda session request med html inputs för att exekvera delar av koden i kontrollern. Jag har med lärt mig hur man använder flödesdiagram och psudokod för att planera lösningar. </p>
    </section>
    
    <section>
    <h2>Kmom04</h2>
    <p>Phpunit är väldigt likt unit testerna vi gjorde i oopython kursen, så jag tog lite från vad vi lärde oss i den kursen för att lösa denna uppgift. Jag föredrar phpunit till det vi gjorde i python för med phpunit fick man en bättre rapport över det vi gjorde. Mitt ända problem med phpunit var att i terminalen skrev den inte ut all info jag behövde ibland när ett test gick fel. Jag hade mycket bekymmer att få xdebug att fungera nästan så att felsöka det tog nästan lika lång tid som att göra själva uppgiften. </p>
    <p>Min kodtäckning varierade lite beroende på klass men jag är nöjd då vissa metoder inte var särskilt komplicerade och behövde inte riktigt testas. Det hade inte varit omöjligt för mig att nå upp till 100% men kände att testa varenda liten grej inte var nödvändigt. </p>
    <p>Jag hade inga svårigheter med att testa min kod. Det var bara en gång vart jag behövde skapa en ny metod för att göra koden mer testbar men annars var det inga problem. </p>
    <p>Jag fick skapade en metod till deck klassen som visar alla korten som objekt i stället för att returnera kortens attribut. Annars räkte den koden jag redan hade för att testa spelets klasser. Om jag skulle skrivit om koden lite så skulle jag gjort min gameklass lite lättare att testa då den returnera bara strings. </p>
    <p>Jag tycker att testbar kan vara snyggt om man det inte blir överdrivet många ”onödiga” metoder. Om man behöver testa kod kan det bli så att man lägger till fler metoder som gör så att det blir enklare att testa men har ingen riktigt användning annars. Om man vill ha både ren och testbar kod tycker jag att man ska ta det i åtanke redan innan man börja programmera så att man kan planera metoder som är testbara från första början så man inte behöver komplettera efterhand.</p>
    <p>Min til för detta kmom är att dokumentera kod med symfony och göra unitesting med php</p>

    </section>
    
    <section>
    <h2>Kmom05</h2>
    <p>Här är redovisningstexten</p>
    </section>
    
    <section>
    <h2>Kmom06</h2>
    <p>Här är redovisningstexten</p>
    </section>
    
    <section>
    <h2>Kmom07-10</h2>
    <p>Här är redovisningstexten</p>
    </section>
</article>
{% endblock %}