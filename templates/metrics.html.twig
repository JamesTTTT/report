{% extends "base.html.twig" %}
{% block title %}Metrics{% endblock %}

{% block body %}
    
<article class="content">
    <section>
    <h2>Introduktion</h2>
    <h4>Coverage</h4>
    <p>Code Coverage är ett procentuellt mått som mäter hur mycket av din kod som testas. Om en stor mängd av din kod testas så betyder det att du har hög coverage och riskerar att inte ha gömda buggar i koden. </p>
    <h4>Complexity</h4>
    <p>Complexity är precis vad det låter, det kollar hur komplex koden är. Hur komplicerad koden är räknas ut av ett antal måttsystem, här är några exempel:</p>
    <p>Source Lines of Code (SLOC) – Detta räknar antal rader i koden</p>
    <p>Cyclomatic Complexity – Detta håller koll på kontrollflödet inom ett program. Den gör det genom att mäta alla unika sökvägar i koden som bildas av varje If-sats, while och for-loop.</p>
    <p>Halstead Volume – Detta håller koll på alla variabler i koden som används och hur ofta</p>
    <p>Maintability Index – Detta räknar ut i poäng hur hållbar koden är. Den jämför Cyclomatic Complexity och Halstead Volume mot antal rader i koden.</p>
    <h4>Cohesion</h4>
    <p>Cohesion talar om for oss hur stark relation saker innuti en klass har. Cohesion ökar om metoder inom en klass har mycket gemensamma funktionaliteter, Alltså om man har metoder inom en klass som har svag cohesion och bör de delas upp i olika klasser. Högre cohesion reducera kod komplexitet, höjer hållbarheten och tillåter klassen att vara mer återanvändbar.</p>
    <h4>Coupling</h4>
    <p>Coupling kollar hur självständig klassen är och hur beroende andra klasser är av klassen. Låg coupling betyder oftast hög cehsion och vice versa. Man vill sträva efter låg coupling tillsammans med hög cohesion för att få ut bättre kod prestanda.  </p>
    </section>
    <section>
    <h2>Phpmetrics</h2>
    <p>På översiktsidan fick jag syn på min ”Maintainability / complexity” graf då jag hade några röda cirklar som man vill helst undvika. Klasserna som stog ut mest var Card , Deck och särskillt Game med högst complexity med minst maintainability. Anledningen till att Game klassen är så complex är för att den har så många if-satser för att räkna ut alla möjliga resultat spelet kan ha.</p>
    <p>Om vi tittar på coupling så kan vi se att Deck är klassen som ligger längst upp på den listan med fyra afferent coupling (ingående kopplingar) och en efferent coupling (utgående kopplingar). Detta beror på att Deck är väldigt beroende av Card klassen och Deck2 klassen är väldigt beroende av Deck.</p>
    <p>Average LCOM (lack of cohesion of methods) var 1.18 och alla klasserna utom controllers hade 1 i LCOM. Man vill ha låg LCOM för att undvika besvär.</p>
    <p>De största svagheterna jag hittade i denna rapporten var att i Maintainability / complexity grafen vart det stog ut att mina klasser var stora röda cirklar med låg maintaniability.</p>
    </section>
    <section>
    <h2>Scrutinizer</h2>
    <p>Jag har haft lite besvär med scrutinizer då den räknar med mycket extra filer som jag har ingen påverkan över. Detta gör så att mitt scrutinizer poäng ligger på ett 6.14 vilket är väldigt lågt. Jag har försökt filtrera bort alla dessa filer vilket har fungerat då min score ändrades till 9.87 men problemet är då att min coverage går ner till noll procent. För att behålla min coverage väljer jag configen som räknar med extra filerna. </p>
    <p>Scrutinizer säger att jag har en 73.81% coverage i mappen med mina klasser vilket är bra för då täcker jag majoriteten av koden i alla fall. Tar vi en lite djupare titt så har jag högst coverage på Player klassen med 100% procent och minst på Deck med 63%. Deck klassen är viktig och hade kunnat behöva fler tester. Eftersom det finns många filer som saknar tester som tillexempel Controller filerna så blir totala Coverage 20% vilket stämmer inte.</p>
    <p>Scrutinizer var lite mer förlåtande än PHPmetrics beroende mina klasser för alla mina klasser fick rating A med lite varierande complexity. De klasserna med högsta complexity här är Deck med 12, Card med 7 och Game med 9. Compare metoden i Game klassen fick B i betyg för att det fanns lite för många conditions.</p>
    <p>Scrutinizer hittade lite oanvänd kod och bug vilket hade behövt redas ut, Låg coverage hos några klasser som deck och metoder som fick B ranking istället för A på grund av hög complexity vilket kan fixas.  </p>
    </section>
    <section>
    <h2>Förbättringar</h2>
    <p>Förbättringarna jag tänker utföra är: </p>

    <ul>
        <li>Optimisterna Game::compare() genom att minska antalet conditions för att sänka complexity. Jag tror att detta kommer höja mitt scrutinizer betyg och förhoppningsvis ge klassen mer maintainabiliy.</li>
        <li>Optimisterna Card::getDetails() genom att sänka antalet cases i switch casen för att sänka complexity. Jag tror att detta kommer ge mig bättre betyg i scrutinizer.</li>
        <li>Öka coverage för klassen Deck och Cards för att dem två klasserna har minst. Jag kommer skapa tester för metoder som saknar. Detta kommer antagligen höja min coverage på dessa klasser</li>
        <li>Laga buggarna och ta bort den onödiga koden som scrutinizer påpekade för att höja betyget</li>
    </ul>

    </section>
    <section>
    <h2>Diskussion</h2>
    <p>Text Goes Here...</p>
    </section>

</article>
{% endblock %}