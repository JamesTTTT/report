{% extends "base.html.twig" %}
{% block title %}Metrics{% endblock %}

{% block body %}
    
<article class="content">
    <section>
    <h2>Introduktion</h2>
    <h4>Coverage</h4>
    <p>Code Coverage är ett procentuellt mått som mäter hur mycket av din kod som testas. Om en stor mängd av din kod testas så betyder det att du har hög coverage och riskerar att inte ha gömda buggar i koden. </p>
    <h4>Complexity</h4>
    <p>Complexity är precis vad det låter, det kollar hur komplex koden är. Complexity mätts i en skala mellan ett och tio. Hur komplicerad koden är räknas ut av ett antal måttsystem, här är några exempel:</p>
    <p>Source Lines of Code (SLOC) – Detta räknar antal rader i koden</p>
    <p>Cyclomatic Complexity – Detta håller koll på kontrollflödet inom ett program. Den gör det genom att mäta alla unika sökvägar i koden som bildas av varje If-sats, while och for-loop.</p>
    <p>Halstead Volume – Detta håller koll på alla variabler i koden som används och hur ofta</p>
    <p>Maintability Index – Detta räknar ut i poäng hur hållbar koden är. Den jämför Cyclomatic Complexity och Halstead Volume mot antal rader i koden.</p>
    <h4>Cohesion</h4>
    <p>Cohesion talar om for oss hur stark relation saker innuti en klass har. Cohesion ökar om metoder inom en klass har mycket gemensamma funktionaliteter, Alltså om man har metoder inom en klass som har svag cohesion och bör de delas upp i olika klasser. Högre cohesion reducera kod komplexitet, höjer hållbarheten och tillåter klassen att vara mer återanvändbar.</p>
    <h4>Coupling</h4>
    <p>Coupling kollar hur självständig klassen är och hur beroende andra klasser är av klassen. Låg coupling betyder oftast hög cehsion och vice versa. Man vill sträva efter låg coupling tillsammans med hög cohesion för att få ut bättre kod prestanda.  </p>
    </section>
    <section>
    <h2>Phpmetrics</h2>
    <p>På översiktsidan fick jag syn på min ”Maintainability / complexity” graf då jag hade några röda cirklar som man vill helst undvika. Klasserna som stog ut mest var Card , Deck och särskillt Game med högst complexity med minst maintainability. Anledningen till att Game klassen är så complex är för att den har så många if-satser för att räkna ut alla möjliga resultat spelet kan ha.</p>
    <p>Om vi tittar på coupling så kan vi se att Deck är klassen som ligger längst upp på den listan med fyra afferent coupling (ingående kopplingar) och en efferent coupling (utgående kopplingar). Detta beror på att Deck är väldigt beroende av Card klassen och Deck2 klassen är väldigt beroende av Deck.</p>
    <p>Average LCOM (lack of cohesion of methods) var 1.18 och alla klasserna utom controllers hade 1 i LCOM. Man vill ha låg LCOM för att undvika besvär.</p>
    </section>
    <section>
    <h2>Scrutinizer</h2>
    <p>Text Goes Here...</p>
    </section>
    <section>
    <h2>Förbättringar</h2>
    <p>Text Goes Here...</p>
    </section>
    <section>
    <h2>Diskussion</h2>
    <p>Text Goes Here...</p>
    </section>

</article>
{% endblock %}